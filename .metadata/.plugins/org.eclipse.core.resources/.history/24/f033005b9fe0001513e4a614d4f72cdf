package CI346;

import java.util.ArrayList;
import java.util.Collections;

public class explicitConcurrency implements Runnable{
	
	ArrayList<Integer> values = new ArrayList<Integer>(); 
	int start = 0;
	int end = 0;
	int deletePosition = 1;
	int whileLoopCount = 1;

	public explicitConcurrency(int startNumber, int endNumber) {
		start = startNumber;
		end = endNumber;
	}

	@Override
	public void run() {
		for(int a = start; a <= end; a++){
			values.add(a);
		}
		System.out.println(Thread.currentThread().getName() + values);
			
		
		
		// Removes numbers that aren't lucky
		while(deletePosition < values.size()){
			for(int n = deletePosition; n < values.size(); n = n + deletePosition)
				values.remove(n);

			deletePosition = values.get(whileLoopCount)-1;
			if(Thread.currentThread().getName().equals("Thread-1"))
			{
				deletePosition = deletePosition - (end-1);
			}
			whileLoopCount++;
		}
		System.out.println(Thread.currentThread().getName() + values);
		
/*
 
		//Removes 1 from values as not prime
		values.set(0, 0);
		//Removes numbers that aren't prime
		for(int b = 0; b < values.size(); b++){
			int currVal = values.get(b);
			for (int c = 3; c < currVal; c += 2){
				if (currVal % c == 0) {
					values.set(b, 0);
					break;
				}
			}
		}*/
}
	
//	public static int getCount()
//	{
//		return (values.size() - Collections.frequency(values, 0));
//	}
	
/*	public static synchronized int getDeletePosition(){
		return deletePosition;
	}
	
	public static synchronized void setDeletePosition(int value){
		deletePosition = value;
	}
	
	public static synchronized int getWhileLoopCount(){
		return whileLoopCount;
	}
	
	public static synchronized void addWhileLoopCount(){
		whileLoopCount++;
	}*/
	public static synchronized void addValues(int value){
//		values.add(value);
	}
	
	
	public static synchronized void addToValues()
	{
		
	}
	
	public static synchronized void removeFromValues()
	{
		
	}
	
}
