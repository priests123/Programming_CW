package CI346;


import java.util.stream.Stream;

public class Main {
	public static void main(String[] args) throws InterruptedException 
	{
		int primeValue = 100000;
		long startTimer = 0;
		long endTimer = 0;
		
		//NO CONCURRENCY
		
		startTimer = System.nanoTime();
		noConcurrency.noConcurrencyPrime(primeValue);
		endTimer = System.nanoTime();
		System.out.printf("The range of numbers is between 0 and %d\n\n", primeValue);
		System.out.printf("The no concurrency program took %s seconds to complete and found %d prime numbers\n\n\n", calculateTimeTaken(startTimer, endTimer), noConcurrency.getCount());
		
		
		//EXPLICIT CONCURRENCY
		
		Thread t1 = new Thread(new explicitConcurrency(2, primeValue/2));
		Thread t2 = new Thread(new explicitConcurrency(primeValue/2, primeValue));
		startTimer = System.nanoTime();
		t1.start();	
		t2.start();
		t1.join();
		t2.join();
		endTimer = System.nanoTime();
		System.out.printf("The explicit concurrency program took %s seconds to complete and found %d prime numbers\n\n\n", calculateTimeTaken(startTimer, endTimer), explicitConcurrency.getCount());
		
		
		//IMPLICIT CONCURRENCY
		int startValue = 2;
		startTimer = System.nanoTime();
		long count = Stream.iterate(startValue , n -> n+1).parallel().limit(primeValue - startValue)
				.filter(n -> implicitConcurrency.calculatePrimes(n)).count();
		endTimer = System.nanoTime();
		System.out.printf("The implicit concurrency program took %s seconds to complete and found %d prime numbers\n\n\n", calculateTimeTaken(startTimer, endTimer), count);

		
		
	}
	
	public static String calculateTimeTaken(long startTime, long endTime){
		double timeTaken = (double) (endTime - startTime) / 1000000000;
		return String.format("%.5f", timeTaken);
	}
}

