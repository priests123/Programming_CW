package CI346;


import java.util.stream.Stream;

public class Main {
	public static void main(String[] args) 
	{
		int primeValue = 250000;
		long startTimer = 0;
		long endTimer = 0;
		
		startTimer = System.nanoTime();
		noConcurrency.noConcurrencyPrime(primeValue);
		endTimer = System.nanoTime();
		System.out.println("The no concurrency " + calculateTimeTaken(startTimer, endTimer) + " and produced " + noConcurrency.)
		
		
		
		
		/**Thread t1 = new Thread(new explicitConcurrency(2, primeValue/2));
		Thread t2 = new Thread(new explicitConcurrency(primeValue/2, primeValue));
		long startTimer = System.nanoTime();
		t1.start();	
		t2.start();
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			
		}
		long stopTimer = System.nanoTime();
		double tt = (double) (stopTimer - startTimer) / 1000000000;
		System.out.printf("The program took %.5f seconds to execute\n", tt);
		System.out.println("Value: " + explicitConcurrency.getCount() + "\n\n");**/
		
		
		
		//implicitConcurrency ic = new implicitConcurrency();
	
		/**long startTimer = System.nanoTime();
		int startValue = 2;
		long count = Stream.iterate(2 , n -> n+1).limit(primeValue - startValue).parallel()
				.filter(n -> implicitConcurrency.calculatePrimes(n)).count();
		long stopTimer = System.nanoTime();
		double tt = (double) (stopTimer - startTimer) / 1000000000;
		System.out.printf("The program took %.5f seconds to execute\n", tt);
		System.out.print("Total count of primes:   " + count);**/
		
		
	}
	
	public static String calculateTimeTaken(long startTime, long endTime){
		double timeTaken = (endTime - startTime) / 1000000000;
		return String.format("program took %.5f to complete", timeTaken);
	}
}

